package main;

import org.python.core.PyCode;
import org.python.util.PythonInterpreter;

public class Base36Jython {

	public static void main(String[] args) {
		PythonInterpreter pi = new PythonInterpreter();
		String string = "import string\nimport java.lang.String\n\n"
				 + "def is_it_even(number):\n"
				 + "    return number % 2 == 0\n"
				 + "def get_even_letters(message):\n"
				 + "    even_letters = []\n"
				 + "    for i in range(0 , len(message)):\n"
				 + "        if is_it_even(i):\n"
				 + "            even_letters.append(message[i])\n"
				 + "    return even_letters\n"
				 + "def get_odd_letters(message):\n"
				 + "    odd_letters = []\n"
				 + "    for i in range(0 , len(message)):\n"
				 + "        if not is_it_even(i):\n"
				 + "            odd_letters.append(message[i])\n"
				 + "    return odd_letters\n"
				 + "def swap_letters(message):\n"
				 + "    letter_list = []\n"
				 + "    even_letters = get_even_letters(message)\n"
				 + "    odd_letters = get_odd_letters(message)\n"
				 + "    if not len(even_letters) == len(odd_letters):\n"
				 + "        message = message + \".\"\n"
				 + "    even_letters = get_even_letters(message)\n"
				 + "    odd_letters = get_odd_letters(message)\n"
				 + "    for counter in range(0, int(len(message) / 2)):\n"
				 + "        letter_list.append(odd_letters[counter])\n"
				 + "        letter_list.append(even_letters[counter])\n"
				 + "    b = ''\n"
				 + "    a = b.join(letter_list)\n"
				 + "    return a\n"
				 + "def convert_binary_to_number(z):\n"
				 + "    a = z\n"
				 + "    f = []\n"
				 + "    i = 0\n"
				 + "    n = 1\n"
				 + "    result = 0\n\n"
				 + "    for i in range(1, len(a) + 2):\n"
				 + "        n = n * 2\n"
				 + "        f.append(n)\n"
				 + "    i = 0\n"
				 + "    for i in range(0, len(a)):\n"
				 + "        if a[i] == \"1\":\n"
				 + "            if not i == -1:\n"
				 + "                result = result + f[i]\n"
				 + "            else:\n"
				 + "                result = result + 1\n"
				 + "    return(str(result / 2))\n"
				 + "def convert_number_to_binary(z):\n"
				 + "    a = int(z)\n"
				 + "    running = True\n"
				 + "    div = 2\n"
				 + "    result = []\n"
				 + "    while running:\n"
				 + "        if a % div == div / 2:\n"
				 + "            a = a - (div / 2)\n"
				 + "            result.append(\"1\")\n"
				 + "        else:\n"
				 + "            result.append(\"0\")\n"
				 + "        div = div * 2\n"
				 + "        if a <= 0:\n"
				 + "            break\n"
				 + "    if len(result) < 8:\n"
				 + "        for i in range(0, 8 - len(result)):\n"
				 + "            result.insert(0, \"0\")\n"
				 + "    ndf = \"\"\n"
				 + "    for nd in result:\n"
				 + "        ndf += nd\n"
				 + "    return ndf\n"
				 + "def reverse(lis):\n"
				 + "    a = len(lis)\n"
				 + "    b = a - 1\n"
				 + "    c = 0\n"
				 + "    i = 0\n"
				 + "    lis2 = []\n"
				 + "    for i in range(0, a):\n"
				 + "        lis2.append('')\n"
				 + "    for i in range(0, a):\n"
				 + "        c = b - i\n"
				 + "        lis2[c] = lis[i]\n"
				 + "    return lis2\n"
				 + "def convert_to_base77(n):\n"
				 + "    char_set = ['0' , \"1\", '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', \".\", \",\", \"!\", \"?\", \"/\", \"@\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"\\\"\", \"+\", \"-\", \" \", \"]\", \"[\", '\"', \"'\",\"_\"]\n"
				 + "    l = len(char_set)\n"
				 + "    num = n\n"
				 + "    ones = num % l\n"
				 + "    ones_place = ''\n"
				 + "    t = ''\n\n"
				 + "    i = 0\n"
				 + "    digits = []\n"
				 + "    running = True\n"
				 + "    div = l\n"
				 + "    div1 = div / l\n"
				 + "    while running:\n"
				 + "        ones = num % div\n"
				 + "        num = num - ones\n"
				 + "        ones = ones / div1\n"
				 + "        digits.append(char_set[int(ones)])\n"
				 + "        #digits.append(\"_\")\n"
				 + "        if num == 0:\n"
				 + "            running = False\n"
				 + "            break\n"
				 + "        div = div * l\n"
				 + "        div1 = div / l\n"
				 + "        b = ''\n"
				 + "        for z in reverse(digits):\n"
				 + "            b = b + z\n\n"
				 + "    for z in reverse(digits):\n"
				 + "        t = t + z\n"
				 + "    return(t)\n\n"
				 + "def getPos(l, t):\n"
				 + "    c = 0\n"
				 + "    i = 0\n"
				 + "    for c in l:\n"
				 + "        if c == t:\n"
				 + "            return int(i)\n"
				 + "        i += 1\n"
				 + "def convert_to_base10(n):\n"
				 + "    if not isinstance(n, str):\n"
				 + "        raise TypeError(\"Type int is not type str!\")\n"
				 + "    char_set = ['0' , \"1\", '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', \".\", \",\", \"!\", \"?\", \"/\", \"@\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"\\\"\", \"+\", \"-\", \" \", \"]\", \"[\", '\"', \"'\",\"_\"]\n"
				 + "    char_set2 = range(1, 11)\n"
				 + "    a = java.lang.String(n).toCharArray()\n"
				 + "    b = len(a)\n"
				 + "    i = 0\n"
				 + "    p = ''\n"
				 + "    l = len(char_set)\n"
				 + "    o = 0\n"
				 + "    total = 0\n"
				 + "    mult = 1\n"
				 + "    for p in reverse(a):\n"
				 + "        c = ''\n"
				 + "        b = 0\n"
				 + "        m = 0\n"
				 + "        for c in char_set:\n"
				 + "            if c == p:\n"
				 + "                m = b\n"
				 + "            b += 1\n"
				 + "        total = (total + (mult * m))\n"
				 + "        i += 1\n"
				 + "        mult = mult * l\n\n"
				 + "    return total\n"
				 + "def cb36tb2(n):\n"
				 + "    t = convert_number_to_binary(convert_to_base10(n))\n"
				 + "    print(t)\n\n"
				 + "def percent(v, p):\n"
				 + "    va = v / 100\n"
				 + "    return va * p\n"
				 + "i = not \"exit\" == raw_input(\"Start Program: \")\n"
				 + "while i == True:\n"
				 + "    print(convert_to_base77(int(raw_input(\"Enter a number: \"))))\n"
				 + "    print(convert_to_base10(raw_input(\"Enter a base83 number: \")))\n"
				 + "    #print(encrypt(input(\"Enter a string. : \")))\n"
				 + "    i = not \"exit\" == raw_input('Continue Type \"exit\" to terminate: ')\n";		
		//System.out.println(string);
		PyCode pc = pi.compile(string);
		pi.exec(pc);
		pi.cleanup();
		pi.close();
		//PyobjectFactory f = new PyobjectFactory();
		//Base83JythonInterface ref = f.create();
		//ref.
		

	}

}
